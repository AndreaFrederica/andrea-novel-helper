name: build-vsix (npm + --dist-url + arch-correct)

on:
  workflow_dispatch:
    inputs:
      electron_version:
        description: "VS Code 的 Electron 版本（如 30.0.9）"
        required: true
        default: "30.0.9"
      publish:
        description: "打完是否立即发布到 Marketplace（需要 VSCE_PAT）"
        type: boolean
        required: true
        default: false
      prerelease:
        description: "作为预发布版本发布（仅在 publish=true 时生效）"
        type: boolean
        required: true
        default: false

jobs:
  build:
    name: Build ${{ matrix.target }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: win32-x64
            platform: win32
            arch: x64
          - os: ubuntu-latest
            target: linux-x64
            platform: linux
            arch: x64
          - os: macos-latest
            target: darwin-arm64
            platform: darwin
            arch: arm64
          - os: macos-latest
            target: darwin-x64
            platform: darwin
            arch: x64
    runs-on: ${{ matrix.os }}

    env:
      # 扩展根目录；若在子目录请改成实际路径，例如 packages/extension
      WORKDIR: .
      EV: ${{ inputs.electron_version }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # 安装依赖
      - name: Install deps
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            echo "No lockfile found, falling back to npm install"
            npm install --no-audit --no-fund
          fi

      # 先构建 webview（你 package.json 里也在 vscode:prepublish 里做了，但这里显式跑一次更直观）
      - name: Build webview
        working-directory: ${{ env.WORKDIR }}
        run: npm run build:webview

      # TypeScript 编译（与 vscode:prepublish 一致）
      - name: Compile extension
        working-directory: ${{ env.WORKDIR }}
        run: npm run compile

      # 为目标 Electron + 平台/架构重建原生模块（跨平台统一用 bash）
      - name: Rebuild @vscode/sqlite3 for Electron (${{ matrix.platform }}-${{ matrix.arch }})
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          npm rebuild @vscode/sqlite3 \
            --runtime=electron \
            --target='${{ inputs.electron_version }}' \
            --dist-url=https://electronjs.org/headers \
            --platform='${{ matrix.platform }}' \
            --arch='${{ matrix.arch }}'


      # 确保 dist 目录存在，然后打包到固定文件名
      - name: Package VSIX
        working-directory: ${{ env.WORKDIR }}
        shell: bash
        run: |
          mkdir -p dist
          OUT="dist/anh-${{ matrix.target }}.vsix"
          echo "Packaging to $OUT"
          npx vsce package --target ${{ matrix.target }} --out "$OUT"
          ls -al dist

      # 上传 VSIX
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}.vsix
          path: ${{ env.WORKDIR }}/dist/*.vsix

  publish:
    name: Publish to Marketplace
    needs: build
    if: ${{ inputs.publish == true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "*.vsix"
          merge-multiple: true

      - run: npm i -g @vscode/vsce

      - name: Publish all VSIX
        shell: bash
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=( *.vsix )
          if [ ${#files[@]} -eq 0 ]; then
            echo "No VSIX files found"; exit 1
          fi

          for f in "${files[@]}"; do
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              echo "Publishing (pre-release) $f"
              vsce publish --packagePath "$f" --pre-release
            else
              echo "Publishing $f"
              vsce publish --packagePath "$f"
            fi
          done
